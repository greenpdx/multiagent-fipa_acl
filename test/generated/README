Description of TestMessages: 

run "run_tests" to run all tests

the parser apparently parses the reply-to parameter correctly but it doesn't print it

the uerdefined parameter(from the agentAID expansion) must be uncommented and finished

all the test messages left that fail the parsing involve userdefined parmeters for agentAID so once that is fixed they should all parse

-----------------------------------------------------------------------------------------------------------


The following test files were generated by creating different messages in the test.cpp and using the generator to write their binary encodings to the respective output files. The files were then passed as arguments to the parser. Where needed, some were manually checked.


!!!!!!TestMessages 4, 5 and 14 are to be discarded; a bug in the encoder was fixed after they were generated so they are incorrect !!!!!!(I removed them)


TestMessage.txt --> simple acl message, preset performative --> passes test

TestMessage2.txt --> simple acl message, user defined performative --> does not pass(checked manually it does)

TestMessage3.txt --> simple acl message, preset performative, conversationID field also set --> does not pass(checked manually it does)

TestMessage4.txt --> simple acl message, preset performative, an user defined parameter added --> does not pass(checked manually it does)

TestMessage5.txt --> simple acl message, preset performative, two user defined parameters were added(one of which identical to the userdef from TestMessage4.txt example) --> does not pass(checked manually it does)

TestMessage6.txt --> simple acl message, preset performative, reply_by1 parameter set(time of reply as string) --> does not pass(checked manually it does)

TestMessage7.txt --> simple acl message, preset performative, and Agent AID object set as sender -->passes test(don't understand why, relative to the previous ones)

TestMessage8.txt & TestMessage9.txt --> simple acl messages, preset performative, and Agent AID object as sender and one or two respectively Agent AID objects as receivers --> pass test

TestMessage10.txt - TestMessage13.txt --> played with agent AIDs as parameters for message added one and more receivers, added one or more resolvers for some, modiffied res_depth parameter in the encoding, and added some url adresses for some. --> all passed the test(seems to work well with agentAIDs)

TestMessage14.txt --> like TestMessage13.txt but with an userdefined parameter added to one of the agentAIDs --> did not pass(manual check not very thorough due to complexity but i think it should have passed)




Notes:

	* apparently nothing involving Binary Expressions or Binary words passes; don't know why, the functions seem to give expected output(for the tested parameters at least).
	* thought as to why the parser may not give some of the above messages as valid: When the grammar has only one possible expansion per grammar variable it seems to work ok(for the agentAIDs examples it worked even though it called the binary word expansion where in other examples it failed); however when the grammar branches out(the binary expression expansion for example) the message doesn't seem to pass the test, even if the encoding respects one of those possible expansions. 


Byte-wise specification for TestMessage16.txt -> message with predefined message perfrmative and one userdefined parameter set.

the encoding generated by the message generator was:
fa 10 15 00 10 63 72 65 74 7a 75 00 14 22 6d 61 72 65 22 00 01

fa - message id
10 - message version
15 - message type(preset performative)
00 - begin user-defined parameter marker
10 .... 00 - mark a binWord (the parameter name)

63 72 65 74 7a 75 - ascii for the parameter name binWord(cretzu)

14 ....00 - mark a binString(the parameter value)

22 6d 61 72 65 22 - ascii for the parameter value plus the surounding quotation marks("mare")

01 - endOfMessage

-------> did not work initially; if in the grammar .h file I change the production of the userdefined message parameter to binWord binString instead of ParameterName and parameterValue it works fine(the parameterName and parameterValue are "useless" prductions)


Mircea's comment on the generator:
when we follow a binaryExpression production that ends up in a string literal:
	- the format is 0x14 string literal 0x00: the padding 0x00 is not currently added
	
	- the way I saw it implemented, the 0x00 byte can be deleted from the byteLengthEncodedStringTerminated and uncommented in the binaryString(line 		  456) and everywhere else byteLengthEncodedStringTerminated appears, or the 0x00 added to the definition of the string literal
	
	- the specification itself seems a little redundant and maybe should not be implemented exactly with the productions that are described there
		example: binary expression has an expansion "0x76 len8 String" and binary String has an expansion "len8 String"; this seems a little 			redundant at best, or we can have words such as "[..]0x76 len8 len8 String[..]" which would be correct according to the grammar but I don't 			know if they make sense
		 
binary word:
	- apparently this doesn't work either but I also cannot find any bugs in the grammar specification so I don't know why(TestMessage15.txt is an 		  ilustrative example)
	- I do not understand why testing succeeds for messages with refferences to AgentAID class(test messages 7-13), because when generating the 		  encoding, the same getBitBinWord function is being called(for the name of the agent) which in other circumstances(other types of parameters) does not work.
