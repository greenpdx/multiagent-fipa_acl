The following test files were generated by creating different messages in the test.cpp and using the generator to write their binary encodings to the respective output files. The files were then passed as arguments to the parser. Where needed, some were manually checked.



TestMessage.txt --> simple acl message, preset performative --> passes test

TestMessage2.txt --> simple acl message, user defined performative --> does not pass(checked manually it does)

TestMessage3.txt --> simple acl message, preset performative, conversationID field also set --> does not pass(checked manually it does)

TestMessage4.txt --> simple acl message, preset performative, an user defined parameter added --> does not pass(checked manually it does)

TestMessage5.txt --> simple acl message, preset performative, two user defined parameters were added(one of which identical to the userdef from TestMessage4.txt example) --> does not pass(checked manually it does)

TestMessage6.txt --> simple acl message, preset performative, reply_by1 parameter set(time of reply as string) --> does not pass(checked manually it does)

TestMessage7.txt --> simple acl message, preset performative, and Agent AID object set as sender -->passes test(don't understand why, relative to the previous ones)

TestMessage8.txt & TestMessage9.txt --> simple acl messages, preset performative, and Agent AID object as sender and one or two respectively Agent AID objects as receivers --> pass test

TestMessage10.txt - TestMessage13.txt --> played with agent AIDs as parameters for message added one and more receivers, added one or more resolvers for some, modiffied res_depth parameter in the encoding, and added some url adresses for some. --> all passed the test(seems to work well with agentAIDs)

TestMessage14.txt --> like TestMessage13.txt but with an userdefined parameter added to one of the agentAIDs --> did not pass(manual check not very thorough due to complexity but i think it should have passed)




Notes:

	* apparently nothing involving Binary Expressions or Binary words passes; don't know why, the functions seem to give expected output(for the tested parameters at least).
	* thought as to why the parser may not give some of the above messages as valid: When the grammar has only one possible expansion per grammar variable it seems to work ok(for the agentAIDs examples it worked even though it called the binary word expansion where in other examples it failed); however when the grammar branches out(the binary expression expansion for example) the message doesn't seem to pass the test, even if the encoding respects one of those possible expansions. 
